#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>

#define PORT 12345
#define MAX_CLIENTS 1

volatile sig_atomic_t wasSigHup = 0;

void sigHupHandler(int sig) {
    wasSigHup = 1;
}

int main() {
    int serverSocket, clientSocket;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addrLen = sizeof(clientAddr);
    fd_set readFds;
    int maxFd;
    sigset_t blockedMask, origMask;
    struct sigaction sa;

    // Создание сокета
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket < 0) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Настройка адреса сервера
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(PORT);

    // Привязка сокета к адресу
    if (bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {
        perror("bind");
        close(serverSocket);
        exit(EXIT_FAILURE);
    }

    // Прослушивание сокета
    if (listen(serverSocket, MAX_CLIENTS) < 0) {
        perror("listen");
        close(serverSocket);
        exit(EXIT_FAILURE);
    }

    // Регистрация обработчика сигнала
    sigaction(SIGHUP, NULL, &sa);
    sa.sa_handler = sigHupHandler;
    sa.sa_flags |= SA_RESTART;
    sigaction(SIGHUP, &sa, NULL);

    // Блокировка сигнала
    sigemptyset(&blockedMask);
    sigaddset(&blockedMask, SIGHUP);
    sigprocmask(SIG_BLOCK, &blockedMask, &origMask);

    // Основной цикл приложения
    while (1) {
        FD_ZERO(&readFds);
        FD_SET(serverSocket, &readFds);
        maxFd = serverSocket;

        // Добавление клиентского сокета, если он есть
        if (clientSocket > 0) {
            FD_SET(clientSocket, &readFds);
            if (clientSocket > maxFd)
                maxFd = clientSocket;
        }

        // Вызов pselect()
        int ready = pselect(maxFd + 1, &readFds, NULL, NULL, NULL, &origMask);
        if (ready < 0) {
            if (errno == EINTR) {
                if (wasSigHup) {
                    printf("Received SIGHUP signal\n");
                    wasSigHup = 0;
                }
            } else {
                perror("pselect");
                break;
            }
        } else {
            // Обработка нового соединения
            if (FD_ISSET(serverSocket, &readFds)) {
                clientSocket = accept(serverSocket, (struct sockaddr *)&clientAddr, &addrLen);
                if (clientSocket < 0) {
                    perror("accept");
                } else {
                    printf("New connection from %s:%d\n", inet_ntoa(clientAddr.sin_addr), ntohs(clientAddr.sin_port));
                    if (clientSocket > maxFd)
                        maxFd = clientSocket;
                }
            }

            // Обработка данных от клиента
            if (clientSocket > 0 && FD_ISSET(clientSocket, &readFds)) {
                char buffer[1024];
                ssize_t bytesRead = read(clientSocket, buffer, sizeof(buffer));
                if (bytesRead > 0) {
                    printf("Received %zd bytes from client\n", bytesRead);
                } else if (bytesRead == 0) {
                    printf("Client disconnected\n");
                    close(clientSocket);
                    clientSocket = -1;
                } else {
                    perror("read");
                    close(clientSocket);
                    clientSocket = -1;
                }
            }
        }
    }

    // Закрытие сокета сервера
    close(serverSocket);

    return 0;
}
